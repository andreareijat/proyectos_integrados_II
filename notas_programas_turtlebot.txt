CODIGO 1

#!/usr/bin/env python

from re import I
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty

def girar_robot(msg):
    msg.angular.z=1.6
    rate=rospy.Rate

    for _ in range(2):
        pub.publish(msg)
        rate.sleep()

def mover_robot(msg):

    global pub
    
    msg.linear.x=velocidad
    pub.publish(msg)


def scan_and_move(msg):

    vel=Twist()

    principio_array=msg.ranges[0:len(msg.ranges)/3]
    principio=msg.ranges[0]
    frente_array=msg.ranges[len(msg.ranges):(len(msg.ranges)*2/3)]
    frente=msg.ranges[len(msg.ranges)/2]
    final_array=msg.ranges[(len(msg.ranges)*2/3):len(msg.ranges)]
    final=msg.ranges[len(msg.ranges)]

    direccion_avance=comprueba_dead_end()

    for i in principio_array:
        if i < 0.5:
            vel.linear.x=0
            girar_robot(vel)
    for i in frente_array:
        if i < 0.25:
            vel.linear.x=0
            girar_robot(vel)
    for i in final_array:
        if i < 0.5:
            vel.linear.x=0 
            girar_robot(vel)
    
    mover_robot(vel)
    
    vel.linear.x=0



def laser_callback(msg):
    global distancia,objetivo
    distancia = msg.ranges[int(len(msg.ranges)/2)]
    objetivo=distancia+2

    try:
        scan_and_move(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")

#main

rospy.init_node("nodo_control_turtle")
objetivo=2
sub=rospy.Subscriber("/base_scan_1",LaserScan,laser_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)

distancia=6
velocidad=0.3


rospy.spin()


CODIGO 2
#!/usr/bin/env python

from re import I
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty
from nav_msgs.msg import Odometry
import math


def vector_director(msg):

    global posi_robot
    contador=0

    x=posi_robot.pose.pose.position.x
    y=posi_robot.pose.pose.position.y
    z=posi_robot.pose.pose.position.z

    if contador==0: #solo para cogerlo una vez 

        posicion_inicial=[2.0,2.0,0.0]
    
        vector_objetivo=[x-posicion_inicial[0],y-posicion_inicial[1], z-posicion_inicial[2]]

        contador+=1

        angulo_vector_director = math.atan(vector_objetivo[0]/vector_objetivo[1]) #el resultado ya esta en radianes
    
    if contador==1:

        posicion_inicial

    return angulo_vector_director

#def centrar():

#def comprobar_si_esta_centrado():


def avanzar(msg):


    derecha=msg.ranges[len(msg.ranges)-1]  #cogerlas como angulos
    izquierda=msg.ranges[0]
    frente=msg.ranges[len(msg.ranges)/2]
    tope=0.5

    #derecha->cuando tenga 45 grados
    #izquierda->cuando tenga 180 grados
    #frente->cuando tenga 90 grados
    #relaciona ranges con angulos

    vel=Twist()

    
    if(frente > 0.5): #despejado de frente

        vel.linear.x=0.3  #luego modificar la velocidad
        #vel.angular.z=vector_director(msg) #IGUAL NO VA AQUI
    
    elif(derecha > tope and izquierda > tope): #despejado a izq y dcha

        vel.angular.z=math.radians(-45) #gira hacia la derecha
    
    elif(derecha > tope and izquierda < tope): #despejado dcha

        vel.angular.z=math.radians(-45) #gira a la derecha
    
    elif(izquierda > tope and derecha < tope): #despejado izq

        vel.angular.z=math.radians(45) #gira a la izquierda

    else: #NO TIENE SALIDA A IZQ, DCHA Y FRENTE

        #invertimos el vector director
        vector=vector_director(msg)

    vel.linear.x=0.0
    pub.publish(vel)

def odom_callback(msg):

    posicion_anterior=[2.0,2.0,0.0]
    global posi_robot, angulo_actual
    posi_robot=msg

    angulo_actual=math.atan(posi_robot.pose.pose.position.y/posi_robot.pose.pose.position.y)


def laser_callback(msg):

    global distancia
    distancia = msg.ranges[int(len(msg.ranges)/2)]

    try:
        avanzar(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")




rospy.init_node("nodo_control_turtle")

sub=rospy.Subscriber("/base_scan_1",LaserScan,laser_callback)
sub=rospy.Subscriber("/odom",Odometry, odom_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)

posi_robot=Odometry()
angulo_actual=0
distancia=6
#velocidad=0.3


rospy.spin()

CODIGO 3

from re import I
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty
from nav_msgs.msg import Odometry
import math


def vector_director(msg):

    global contador_vector

    global posi_robot, posiciones, angulo_vector_actual, angulo_vector_objetivo
    

    x=posi_robot.pose.pose.position.x
    y=posi_robot.pose.pose.position.y
    z=posi_robot.pose.pose.position.z
    
    if contador_vector>=1:
        rospy.loginfo("uno")
        vector_actual=[(posiciones[len(posiciones)-1])[0] - (posiciones[len(posiciones)-2])[0], (posiciones[len(posiciones)-1])[1] - (posiciones[len(posiciones)-2])[1]]
        try:
            angulo_vector_actual = math.atan(vector_actual[0]/vector_actual[1]) #el resultado ya esta en radianes
        except ZeroDivisionError:
            angulo_vector_actual = 0.0
        

    
    if contador_vector==0: #solo para cogerlo una vez 
        rospy.loginfo("cero")
        posicion_inicial=[2.0,2.0,0.0]
    
        vector_objetivo=[x-posicion_inicial[0],y-posicion_inicial[1], z-posicion_inicial[2]]

        contador_vector+=1

        angulo_vector_objetivo = math.atan(vector_objetivo[0]/vector_objetivo[1]) #el resultado ya esta en radianes

        angulo_vector_objetivo=angulo_vector_actual
        #print(angulo_vector_actual,angulo_vector_objetivo,"angulos")

    return angulo_vector_objetivo, angulo_vector_actual

#def centrar():

#def comprobar_si_esta_centrado():


def avanzar(msg):


    #derecha=msg.ranges[len(msg.ranges)-1]  #cogerlas como angulos
    #izquierda=msg.ranges[0]
    #frente=msg.ranges[len(msg.ranges)/2]
    tope=0.5
    longitud=len(msg.ranges)
    derecha=min(msg.ranges[0:(longitud//3)])
    frente=min(msg.ranges[longitud//3:(longitud*2//3)-1])
    izquierda=min(msg.ranges[longitud*2//3:longitud])
    #print("derecha",derecha,"izquierda",izquierda,"frente",frente)

    angulo_vector_objetivo,angulo_vector_actual=vector_director(msg)
    rospy.loginfo("angulo objetivo %f, angulo actual %f ", angulo_vector_objetivo, angulo_vector_actual)
    #derecha->cuando tenga 45 grados
    #izquierda->cuando tenga 180 grados
    #frente->cuando tenga 90 grados
    #relaciona ranges con angulos

    vel=Twist()
    
    if(angulo_vector_objetivo==angulo_vector_actual and frente > 0.5): #despejado de frente
        rospy.loginfo("hola 1")

        vel.linear.x=0.3  #luego modificar la velocidad
        #vel.angular.z=vector_director(msg) #IGUAL NO VA AQUI
    
    elif(derecha > tope and izquierda > tope): #despejado a izq y dcha
        rospy.loginfo("hola 2")
        
        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) - 90)) #gira hacia la derecha
    
    elif(derecha > tope and izquierda < tope): #despejado dcha
        rospy.loginfo("hola 3")

        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) - 90)) #gira hacia la derecha
    
    elif(izquierda > tope and derecha < tope): #despejado izq
        rospy.loginfo("hola 4")

        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) + 90)) #gira hacia la derecha #gira a la izquierda

    elif(angulo_vector_objetivo==angulo_vector_actual and frente < 0.5): #NO TIENE SALIDA A IZQ, DCHA Y FRENTE
        rospy.loginfo("hola 5")

        #invertimos el vector director
        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) + 180)) #se da la vuelta

    
    pub.publish(vel)
    vel.linear.x=0.0

def odom_callback(msg):

    global posi_robot, posiciones, contador_lista

    posi_robot=msg
    x=posi_robot.pose.pose.position.x
    y=posi_robot.pose.pose.position.y
    z=posi_robot.pose.pose.position.z

    posiciones.append([x,y,z])
    contador_lista+=1

    rospy.loginfo(posiciones)

    if contador_lista > 3:
        posiciones.pop(0)



def laser_callback(msg):

    global distancia
    distancia = msg.ranges[int(len(msg.ranges)/2)]

    try:
        avanzar(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")




rospy.init_node("nodo_control_turtle")

posi_robot=Odometry()
distancia=6
posiciones=[]
angulo_vector_actual=0.0
angulo_vector_objetivo=0.0
contador_lista=0
contador_vector=0

sub=rospy.Subscriber("/base_scan_1",LaserScan,laser_callback)
sub=rospy.Subscriber("/odom",Odometry, odom_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)


#velocidad=0.3


rospy.spin()

CODIGO 5
#!/usr/bin/env python
#REVISAR LOS IFS DE CONTROL DE MOVIMIENTO, DISTANCIAS MAS CORTAS? ETC.
from re import I
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty
from nav_msgs.msg import Odometry
import math


def vector_director(msg):

    global contador_vector

    global posiciones, angulo_vector_actual, angulo_vector_objetivo
    
    if contador_vector>1:
        rospy.loginfo("uno")
        vector_actual=[(posiciones[len(posiciones)-1])[0] - (posiciones[len(posiciones)-2])[0], (posiciones[len(posiciones)-1])[1] - (posiciones[len(posiciones)-2])[1]]
        try:
            angulo_vector_actual = math.atan(vector_actual[0]/vector_actual[1]) #el resultado ya esta en radianes
        except ZeroDivisionError:
            angulo_vector_actual = 0.0
            rospy.loginfo("except")
        

    
    if contador_vector==1: #solo para cogerlo una vez 
        rospy.loginfo("cero")
    
        vector_objetivo=[(posiciones[len(posiciones)-1])[0] - (posiciones[len(posiciones)-2])[0], (posiciones[len(posiciones)-1])[1] - (posiciones[len(posiciones)-2])[1]]

        contador_vector+=1

        try:
            angulo_vector_objetivo = math.atan(vector_objetivo[0]/vector_objetivo[1]) #el resultado ya esta en radianes
        except ZeroDivisionError:
            angulo_vector_objetivo=0.0

        angulo_vector_actual = angulo_vector_objetivo
        #print(angulo_vector_actual,angulo_vector_objetivo,"angulos")

    return angulo_vector_objetivo, angulo_vector_actual

#def centrar():

#def comprobar_si_esta_centrado():


def avanzar(msg):


    #derecha=msg.ranges[len(msg.ranges)-1]  #cogerlas como angulos
    #izquierda=msg.ranges[0]
    #frente=msg.ranges[len(msg.ranges)/2]
    tope=0.5
    longitud=len(msg.ranges)
    derecha=min(msg.ranges[0:(longitud//3)])
    frente=min(msg.ranges[longitud//3:(longitud*2//3)-1])
    izquierda=min(msg.ranges[longitud*2//3:longitud])
    #print("derecha",derecha,"izquierda",izquierda,"frente",frente)

    angulo_vector_objetivo,angulo_vector_actual=vector_director(msg)
    rospy.loginfo("angulo objetivo %f, angulo actual %f ", angulo_vector_objetivo, angulo_vector_actual)
    #derecha->cuando tenga 45 grados
    #izquierda->cuando tenga 180 grados
    #frente->cuando tenga 90 grados
    #relaciona ranges con angulos

    vel=Twist()
    
    if(angulo_vector_objetivo==angulo_vector_actual and frente > 0.5): #despejado de frente
        rospy.loginfo("hola 1")

        vel.linear.x=0.3  #luego modificar la velocidad
        #vel.angular.z=vector_director(msg) #IGUAL NO VA AQUI
    
    elif(derecha > tope and izquierda > tope): #despejado a izq y dcha
        rospy.loginfo("hola 2")
        
        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) - 90)) #gira hacia la derecha
    
    elif(derecha > tope and izquierda < tope): #despejado dcha
        rospy.loginfo("hola 3")

        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) - 90)) #gira hacia la derecha
    
    elif(izquierda > tope and derecha < tope): #despejado izq
        rospy.loginfo("hola 4")

        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) + 90)) #gira hacia la derecha #gira a la izquierda

    elif(angulo_vector_objetivo==angulo_vector_actual and frente < 0.5): #NO TIENE SALIDA A IZQ, DCHA Y FRENTE
        rospy.loginfo("hola 5")

        #invertimos el vector director
        vel.angular.z=math.radians((math.degrees(angulo_vector_actual) + 180)) #se da la vuelta

    
    pub.publish(vel)
    vel.linear.x=0.0

def odom_callback(msg):

    global posi_robot, posiciones, contador_lista

    posi_robot=msg
    x=posi_robot.pose.pose.position.x
    y=posi_robot.pose.pose.position.y

    posiciones.append([x,y])
    contador_lista+=1

    rospy.loginfo(posiciones)

    if contador_lista > 3:
        posiciones.pop(0)



def laser_callback(msg):

    global distancia
    distancia = msg.ranges[int(len(msg.ranges)/2)]
    rospy.loginfo("nueva vuelta")

    try:
        avanzar(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")




rospy.init_node("nodo_control_turtle")

posi_robot=Odometry()
distancia=6
posiciones=[]
angulo_vector_actual=0.0
angulo_vector_objetivo=0.0
contador_lista=0
contador_vector=1

sub=rospy.Subscriber("/base_scan_1",LaserScan,laser_callback)
sub=rospy.Subscriber("/odom",Odometry, odom_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)


#velocidad=0.3


rospy.spin()

http://www.edu.xunta.gal/centros/cpicastroverde/node/684
robotica
roboti


CODIGO 6

#!/usr/bin/env python
from inspect import getinnerframes
from re import I
from socket import gaierror
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty
from nav_msgs.msg import Odometry
import math

def calcular_angulo(vector_actual):
     
    global angulo_vector_actual
    
    try:
        angulo = math.atan(abs(vector_actual[0])/abs(vector_actual[1])) #el resultado ya esta en radianes

        if vector_actual[0] > 0.0 and vector_actual[1]  > 0.0: #PRIMER CUADRANTE
            angulo_vector_actual = angulo
        
        elif vector_actual[0] < 0.0 and vector_actual[1] > 0.0: #SEGUNDO CUADRANTE
            angulo_vector_actual = math.radians(180 - math.degrees(angulo))
        
        elif vector_actual[0] < 0.0 and vector_actual[1] < 0.0: #TERCER CUADRANTE
            angulo_vector_actual = math.radians(180 + math.degrees(angulo))

        elif vector_actual[0] > 0.0 and vector_actual[1] < 0.0: #CUARTO CUADRANTE
            angulo_vector_actual = math.radians(360 - math.degrees(angulo))
    
    except ZeroDivisionError:

        if (vector_actual[0] == 0.0 or vector_actual[0] > 0.0) and vector_actual[1]  == 0.0: 
            angulo_vector_actual=math.radians(0.0)

        if vector_actual[0] == 0.0 and vector_actual[1]  > 0.0: 
            angulo_vector_actual = math.radians(90.0)
        
        if vector_actual[0] < 0.0 and vector_actual[1]  == 0.0: 
            angulo_vector_actual = math.radians(180.0)

        if vector_actual[0] == 0.0 and vector_actual[1] < 0.0: 
            angulo_vector_actual = math.radians(270.0)

    rospy.loginfo("angulo vector actual %f", angulo_vector_actual)

    return angulo_vector_actual

def vector_director(msg):

    global contador_vector

    global posiciones, angulo_vector_actual, angulo_vector_objetivo
    
    if contador_vector>1:

        rospy.loginfo("uno")
        vector_actual=[(posiciones[len(posiciones)-1])[0] - (posiciones[len(posiciones)-2])[0], (posiciones[len(posiciones)-1])[1] - (posiciones[len(posiciones)-2])[1]]
        
        angulo_vector_actual=calcular_angulo(vector_actual)
    
    
    if contador_vector==1: #cogerlo solo una vez 
        rospy.loginfo("cero")
    
        vector_objetivo=[(posiciones[len(posiciones)-1])[0] - (posiciones[len(posiciones)-2])[0], (posiciones[len(posiciones)-1])[1] - (posiciones[len(posiciones)-2])[1]]
        
        angulo_vector_objetivo=calcular_angulo(vector_objetivo)
        contador_vector+=1

        angulo_vector_actual = angulo_vector_objetivo
        #print(angulo_vector_actual,angulo_vector_objetivo,"angulos")

    return angulo_vector_objetivo, angulo_vector_actual

#def centrar():

#def comprobar_si_esta_centrado():

def objetivo_libre():

    angulo_vector_objetivo

def avanzar(msg):

    tope=0.
    longitud=len(msg.ranges)
    derecha=min(msg.ranges[0:(longitud//3)])
    frente=min(msg.ranges[longitud//3:(longitud*2//3)-1])
    izquierda=min(msg.ranges[longitud*2//3:longitud])
    #print("derecha",derecha,"izquierda",izquierda,"frente",frente)

    angulo_vector_objetivo,angulo_vector_actual=vector_director(msg)
    rospy.loginfo("angulo objetivo %f, angulo actual %f ", angulo_vector_objetivo, angulo_vector_actual)

    vel=Twist()
    
    if(angulo_vector_objetivo==angulo_vector_actual and frente > tope): #despejado de frente
        rospy.loginfo("caso 1")
        vel.linear.x=0.6  #luego modificar la velocidad
    
    elif(derecha > tope and izquierda > tope and frente < tope): #despejado a izq y dcha
        rospy.loginfo("caso 2")  
        vel.angular.z=-0.8
        
    
    elif(derecha > tope and izquierda < tope and frente < tope): #despejado dcha
        rospy.loginfo("caso 3")
        vel.angular.z=-0.8
    
    
    elif(izquierda > tope and derecha < tope and frente < tope): #despejado izq
        rospy.loginfo("caso 4")
        vel.angular.z=0.8
        

    elif(derecha < tope and izquierda < tope and frente < tope): #NO TIENE SALIDA A IZQ, DCHA Y FRENTE
        rospy.loginfo("caso 5")

        #invertimos el vector director
        angulo_vector_objetivo=angulo_vector_objetivo + math.radians(math.degrees(180))
        vel.angular.z=0.8
    
    #elif(angulo_vector_objetivo != angulo_vector_actual and frente > tope and objetivo_libre):

        #girar hacia objetivo

    
    pub.publish(vel)
    #vel.linear.x=0.0

def odom_callback(msg):

    global posi_robot, posiciones, contador_lista

    posi_robot=msg
    x=posi_robot.pose.pose.position.x
    y=posi_robot.pose.pose.position.y

    posiciones.append([x,y])
    contador_lista+=1
    
    rospy.loginfo("POSICIONES")
    rospy.loginfo(posiciones)

    if contador_lista > 3:
        posiciones.pop(0)


def laser_callback(msg):

    global distancia
    distancia = msg.ranges[int(len(msg.ranges)/2)]
    rospy.loginfo("nueva vuelta")

    try:
        avanzar(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")



rospy.init_node("nodo_control_turtle")

posi_robot=Odometry()
distancia=6
posiciones=[]
angulo_vector_actual=0.0
angulo_vector_objetivo=0.0
contador_lista=0
contador_vector=1

sub=rospy.Subscriber("/base_scan_1",LaserScan,laser_callback)
sub=rospy.Subscriber("/base_pose_ground_truth",Odometry, odom_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)

rospy.spin()