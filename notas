#!/usr/bin/env python

from re import I
import rospy
from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import Empty

def girar_robot(msg):
    msg.linear.x=0
    #msg.angular.z=1.6
    pub.publish(msg)


def mover_robot(msg):

    global pub
    
    msg.linear.x=velocidad
    pub.publish(msg)

def comprueba_dead_end(izq,frente,dcha):
     return (izq < 0.25 and dcha < 0.25 and frente < 0.25)


def scan_and_move(msg): #controla el movimiento

    vel=Twist()
    #direccion_avance=[x,y,0]

    #divide el array de distancias en 3 regiones
    principio_array=msg.ranges[0:len(msg.ranges)/3]
    frente_array=msg.ranges[len(msg.ranges):(len(msg.ranges)*2/3)]
    final_array=msg.ranges[(len(msg.ranges)*2/3):len(msg.ranges)]

    
    izquierda=msg.ranges[0]
    frente=msg.ranges[len(msg.ranges)/2]
    derecha=msg.ranges[len(msg.ranges)-1]

    #comprobamos si esta atrapado
    #atrapado=comprueba_dead_end(izquierda,frente,derecha)

    #if atrapado == True: #si no puede avanzar, da la vuelta

    #    mover_robot(vel)

    #else:

    for i in principio_array:
        if i < 0.5:
            vel.linear.x=0
            girar_robot(vel)
    for i in frente_array:
        if i < 0.25:
            vel.linear.x=0
            girar_robot(vel)
    for i in final_array:
        if i < 0.5:
            vel.linear.x=0 
            girar_robot(vel)
    
    mover_robot(vel)
    
    vel.linear.x=0



def laser_callback(msg):  #actualiza la distancia e invoca el control del movimiento 
    global distancia
    distancia = msg.ranges[int(len(msg.ranges)/2)]

    try:
        scan_and_move(msg)
	
    except rospy.ROSInterruptException:
        rospy.loginfo("node terminated. ")

        #resetea posiciones
        

#main

rospy.init_node("nodo_control_turtle")
objetivo=2

sub=rospy.Subscriber("/base_scan",LaserScan,laser_callback)
pub=rospy.Publisher("/cmd_vel", Twist, queue_size=1)

distancia=6
velocidad=0.3

rospy.spin()
